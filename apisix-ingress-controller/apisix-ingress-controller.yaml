# Source: apisix-ingress-controller/templates/configmap.yaml

apiVersion: v1
data:
  config.yaml: |
    # log options
    log_level: "info"
    log_output: "stderr"
    cert_file: "/etc/webhook/certs/cert.pem"
    key_file: "/etc/webhook/certs/key.pem"
    http_listen: ":8080"
    https_listen: ":8443"
    ingress_publish_service:
    enable_profiling: true
    kubernetes:
      kubeconfig: ""
      resync_interval: "6h"
      app_namespaces:
      - "*"
      namespace_selector:
      - ""
      election_id: "ingress-apisix-leader"
      ingress_class: "apisix"
      ingress_version: "networking/v1"
      watch_endpointslices: false
      apisix_route_version: "apisix.apache.org/v2beta3"
      enable_gateway_api: false
    apisix:
      default_cluster_base_url: http://apisix-admin.apisix.svc.cluster.local:9180/apisix/admin
      default_cluster_admin_key: "edd1c9f034335f136f87ad84b625c8f1"
      default_cluster_name: "default"
kind: ConfigMap
metadata:
  name: apisix-ingress-controller-configmap
  namespace: apisix
  labels:
    helm.sh/chart: apisix-ingress-controller-0.9.3
    app.kubernetes.io/name: apisix-ingress-controller
    app.kubernetes.io/instance: apisix-ingress-controller
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
---

# Source: apisix-ingress-controller/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: apisix-ingress-controller
  namespace: apisix
  labels:
    helm.sh/chart: apisix-ingress-controller-0.9.3
    app.kubernetes.io/name: apisix-ingress-controller
    app.kubernetes.io/instance: apisix-ingress-controller
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: apisix-ingress-controller
    app.kubernetes.io/instance: apisix-ingress-controller
---
# Source: apisix-ingress-controller/templates/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apisix-ingress-controller
  namespace: apisix
  labels:
    helm.sh/chart: apisix-ingress-controller-0.9.3
    app.kubernetes.io/name: apisix-ingress-controller
    app.kubernetes.io/instance: apisix-ingress-controller
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apisix-ingress-controller
      app.kubernetes.io/instance: apisix-ingress-controller
  template:
    metadata:
      annotations:
        checksum/config: 86ac8ff10e36f63868e04c84289207a8525cdd54cb6f6c94808889a20cb7843e
      labels:
        app.kubernetes.io/name: apisix-ingress-controller
        app.kubernetes.io/instance: apisix-ingress-controller
    spec:
      serviceAccountName: apisix-ingress-controller
      securityContext:
        {}
      volumes:
        - name: configuration
          configMap:
            name: apisix-ingress-controller-configmap
            items:
              - key: config.yaml
                path: config.yaml
      initContainers:
        - name: wait-apisix-admin
          image: busybox:1.28
          command: ['sh', '-c', "until nc -z apisix-admin.apisix.svc.cluster.local 9180 ; do echo waiting for apisix-admin; sleep 2; done;"]
          securityContext:
            {}
      containers:
        - name: apisix-ingress-controller
          command:
            - /ingress-apisix/apisix-ingress-controller
            - ingress
            - --config-path
            - /ingress-apisix/conf/config.yaml
          image: "apache/apisix-ingress-controller:1.4.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          resources:
            {}
          volumeMounts:
            - mountPath: /ingress-apisix/conf
              name: configuration
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
